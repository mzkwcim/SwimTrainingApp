@model SwimTrainingApp.Models.Training

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create Training</h2>


<div id="response-message" class="mt-3"></div>

<form id="create-training-form">
    @Html.AntiForgeryToken()
    <div class="form-group">
        <label asp-for="Date">Training Date</label>
        <input asp-for="Date" type="date" name="Date" class="form-control" />
        <span asp-validation-for="Date" class="text-danger"></span>
    </div>

    <h3>Tasks</h3>
    <div id="tasks-container">
        
    </div>

    <button type="button" id="add-task-btn" class="btn btn-primary">Add Task</button>
    <br /><br />
    <button type="submit" class="btn btn-success">Create Training</button>
</form>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("create-training-form");
            const tasksContainer = document.getElementById("tasks-container");
            const addTaskBtn = document.getElementById("add-task-btn");
            const responseMessage = document.getElementById("response-message");

            let taskIndex = 0;

            function createTaskFields(index) {
                return `
                    <div class="task-item" data-index="${index}">
                        <h4>Task ${index + 1}</h4>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label>Section</label>
                                    <input type="text" name="Tasks[${index}].TrainingSection" class="form-control" required />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label>Description</label>
                                    <input type="text" name="Tasks[${index}].TaskDescription" class="form-control" required />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label>Distance</label>
                                    <input type="number" name="Tasks[${index}].Distance" class="form-control" required />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label>Task Type</label>
                                    <select name="Tasks[${index}].TaskType" class="form-control" required>
                                        <option value="">Select Task Type</option>
                                        <option value="NN">NN</option>
                                        <option value="RR">RR</option>
                                        <option value="ANC">ANC</option>
                                        <option value="ANP">ANP</option>
                                        <option value="AEC1">AEC1</option>
                                        <option value="AEC2">AEC2</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <hr />
                    </div>
                `;
            }

            addTaskBtn.addEventListener("click", function () {
                tasksContainer.insertAdjacentHTML('beforeend', createTaskFields(taskIndex));
                taskIndex++;
            });

            form.addEventListener("submit", function (e) {
                e.preventDefault();

                const dateElement = document.querySelector('input[name="Date"]');
                if (!dateElement) {
                    console.error("Date input element not found.");
                    responseMessage.innerHTML = `<div class="alert alert-danger">Date input is missing.</div>`;
                    return;
                }

                const formData = new FormData(form);

                const data = {
                    Date: dateElement.value,
                    Tasks: []
                };

                formData.forEach((value, key) => {
                    if (key.includes('Tasks')) {
                        const matches = key.match(/Tasks\[(\d+)\]\.(.+)/);
                        if (matches) {
                            const index = matches[1];
                            const field = matches[2];

                            data.Tasks = data.Tasks || [];
                            data.Tasks[index] = data.Tasks[index] || {};
                            data.Tasks[index][field] = value;
                        }
                    }
                });

                data.Tasks = data.Tasks.filter(task => {
                    return task.TrainingSection && task.TaskDescription && task.Distance && task.TaskType;
                });

                console.log("Filtered Tasks to send:", data);

                if (data.Tasks.length === 0) {
                    console.error("No tasks to send!");
                    responseMessage.innerHTML = `<div class="alert alert-danger">Please add at least one task.</div>`;
                    return;
                }

                fetch('/Trainings/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("HTTP error " + response.status);
                    }
                    return response.json();
                })
                .then(result => {
                    if (result.success) {
                        console.log("Success:", result.message);
                        responseMessage.innerHTML = `<div class="alert alert-success">${result.message}</div>`;
                        form.reset();
                        tasksContainer.innerHTML = "";
                        taskIndex = 0;
                    } else {
                        console.error("Error:", result.message, result.errors || []);
                        responseMessage.innerHTML = `<div class="alert alert-danger">${result.message}</div>`;
                    }
                })
                .catch(error => {
                    console.error("AJAX Error:", error);
                    responseMessage.innerHTML = `<div class="alert alert-danger">An unexpected error occurred.</div>`;
                });
            });
        });
    </script>
}
