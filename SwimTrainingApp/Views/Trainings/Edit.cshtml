@model SwimTrainingApp.Models.Training

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit Training Tasks</h2>


<form method="get" asp-action="Edit">
    <div class="form-group">
        <label for="trainingSelect">Select Training:</label>

        <select id="trainingSelect" name="id" class="form-control" onchange="this.form.submit()">
            <option value="" disabled selected>Select a training...</option>
            @foreach (var training in ViewBag.Trainings as List<SwimTrainingApp.Models.Training>)
            {
                <option value="@training.Id" @(Model != null && Model.Id == training.Id ? "selected" : "")>
                    @training.Date.ToShortDateString()
                </option>
            }
        </select>
    </div>
</form>

@if (Model != null)
{
    <h4>Tasks for Training on @Model.Date.ToShortDateString()</h4>

    <!-- Formularz edycji -->
    <form id="editForm">
        <!-- Token CSRF -->
        @Html.AntiForgeryToken()

        <!-- Ukryte pole dla ID treningu -->
        <input type="hidden" name="Id" value="@Model.Id" />
        <input type="hidden" name="Date" value="@Model.Date.ToString("yyyy-MM-dd")" />

        <!-- Kontener dla zadań -->
        <div id="tasks-container">
            @for (int i = 0; i < Model.Tasks.Count; i++)
            {
                <div class="task-item mb-3">
                    <input type="hidden" name="Tasks[@i].Id" value="@Model.Tasks[i].Id" />

                    <div class="form-group">
                        <label for="Tasks_@(i)_TrainingSection">Section:</label>
                        <input id="Tasks_@(i)_TrainingSection" name="Tasks[@i].TrainingSection"
                               class="form-control" value="@Model.Tasks[i].TrainingSection" />
                    </div>

                    <div class="form-group">
                        <label for="Tasks_@(i)_TaskDescription">Description:</label>
                        <input id="Tasks_@(i)_TaskDescription" name="Tasks[@i].TaskDescription"
                               class="form-control" value="@Model.Tasks[i].TaskDescription" />
                    </div>

                    <div class="form-group">
                        <label for="Tasks_@(i)_Distance">Distance:</label>
                        <input id="Tasks_@(i)_Distance" name="Tasks[@i].Distance"
                               class="form-control" value="@Model.Tasks[i].Distance" />
                    </div>

                    <div class="form-group">
                        <label for="Tasks_@(i)_TaskType">Type:</label>
                        <select id="Tasks_@(i)_TaskType" name="Tasks[@i].TaskType" class="form-control">
                            @foreach (var taskType in Enum.GetValues(typeof(SwimTrainingApp.Models.TaskType)))
                            {
                                <option value="@taskType" @(taskType.ToString() == Model.Tasks[i].TaskType.ToString() ? "selected" : "")>
                                    @taskType
                                </option>
                            }
                        </select>
                    </div>
                </div>
                <hr />
            }
        </div>

        <button type="button" class="btn btn-primary" id="saveChanges">Save</button>
    </form>
}

@section Scripts {
    <script>
                       document.getElementById("saveChanges").addEventListener("click", async function () {
            const trainingId = document.querySelector("input[name='Id']").value;
            const trainingDate = document.querySelector("input[name='Date']").value;

            const tasks = Array.from(document.querySelectorAll("#tasks-container .task-item")).map((task, index) => ({
                Id: task.querySelector(`input[name="Tasks[${index}].Id"]`).value,
                TrainingSection: task.querySelector(`input[name="Tasks[${index}].TrainingSection"]`).value,
                TaskDescription: task.querySelector(`input[name="Tasks[${index}].TaskDescription"]`).value,
                Distance: parseInt(task.querySelector(`input[name="Tasks[${index}].Distance"]`).value),
                TaskType: task.querySelector(`select[name="Tasks[${index}].TaskType"]`).value
            }));

            const payload = {
                Id: parseInt(trainingId),
                Date: trainingDate,
                Tasks: tasks
            };

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            try {
                const response = await fetch(`/Trainings/Edit/${trainingId}`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": token
                    },
                    body: JSON.stringify(payload)
                });

                if (response.ok) {
                    alert("Training updated successfully!");
                    location.reload();
                } else {
                    const errorText = await response.text();
                    console.error("Server error:", errorText);
                    alert("Failed to update training. Please check the console for details.");
                }
            } catch (error) {
                console.error("Fetch error:", error);
                alert("An error occurred while saving changes.");
            }
        });
    </script>
}

